Build a full-stack live sports prediction bot using GPT-4 (OpenAI API) and real-time sports data. The bot should predict outcomes for various sports (soccer, basketball, tennis, etc.) based on live match data. The system should include:

1. **Backend:**
   - Use **FastAPI** or **Flask** to create an API server that can handle incoming requests for predictions.
   - **Endpoints**:
     - `/predict/soccer`: Predicts the next goal or match outcome in a soccer game.
     - `/predict/basketball`: Predicts the next scoring play or match outcome in a basketball game.
     - `/predict/tennis`: Predicts the next point or winner in a tennis match.
   - Integrate with **OpenAI's GPT-4 API** to process sports match data and return predictions.
   - Use **live sports data API** (e.g., API-Sports or SportRadar) to fetch real-time match data (team stats, scores, etc.).

2. **Real-Time Sports Data Integration:**
   - Fetch live data on current matches, including scores, team performance, and player stats.
   - Use a service like **API-Sports** to get soccer, basketball, and tennis match data.
   - Update predictions every minute or whenever there's a significant change in the game (e.g., score changes, substitutions, etc.).

3. **Prediction Logic:**
   - Create logic for GPT-4 that can process live match data and make predictions based on the input.
   - Use GPT-4 to generate **match outcome predictions**, **next goal predictions** (for soccer), **next point or winner predictions** (for tennis), and **next scoring play** (for basketball).

4. **Frontend (Optional):**
   - Build a simple **dashboard** using HTML, CSS, and JavaScript to display live match data and predictions.
   - Use **AJAX** or **Fetch API** to call backend endpoints and update the predictions in real-time.

5. **Deployment:**
   - Deploy the backend on a **VPS** (e.g., Hostinger), or a cloud platform.
   - Use **Gunicorn** or **Uvicorn** to serve the FastAPI or Flask app in production.
   - Set up an **SSL certificate** for secure access if deploying on the web.

6. **Additional Features:**
   - Implement basic logging and monitoring to track API calls and prediction performance.
   - Implement caching to reduce latency for frequent requests (e.g., caching match data and predictions).
   - Ensure the bot can scale if more sports or features are added in the future.

Requirements:
- Use **Python 3.8+**.
- Install required dependencies: **FastAPI**, **Uvicorn**, **openai**, **requests**, **API-Sports** (or any similar service).
- Ensure code is clean, commented, and well-documented.
- Provide installation instructions and API usage documentation.

Goal: Create a bot that provides live sports predictions, is scalable, and easy to deploy. The bot should predict soccer, basketball, and tennis events based on live match data and make intelligent predictions using GPT-4.
